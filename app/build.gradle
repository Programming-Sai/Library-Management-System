plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.guava
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.ebenlib.App'
}

// === Fat JAR w/ Main-Class ===
jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// —————————————————————————————————————————————————————————————————————————————————————
// Precompute all file paths *outside* any task action so config cache is happy:
def jarFile    = "$buildDir/libs/${project.name}.jar"
def exeName    = "ebenlib.exe"
def exePath    = "$projectDir/$exeName"
def iconFile   = "$projectDir/ebenlib.ico"
def resHackExe = "C:/Program Files (x86)/Resource Hacker/ResourceHacker.exe"
def nativeImageCmd = "C:/graalvm/jdk-21.0.2/bin/native-image.cmd"

// 1) Compile native image
tasks.register('nativeImage', Exec) {
    group       = 'build'
    description = 'Compile a native exe via GraalVM'

    dependsOn tasks.named('jar')
    inputs.file file(jarFile)
    outputs.file file(exePath)

    commandLine nativeImageCmd,
        '--no-fallback',
        '-jar', jarFile,
        'ebenlib'
}

// 2) Inject icon (only if RH is installed)
tasks.register('injectIcon', Exec) {
    group       = 'build'
    description = 'Add icon to the .exe via Resource Hacker'

    dependsOn tasks.named('nativeImage')
    inputs.file file(exePath)
    outputs.file file(exePath)  // overwrites same file

    // only run if RH is present
    onlyIf { file(resHackExe).exists() }

    commandLine resHackExe,
        '-open',  exePath,
        '-save',  exePath,
        '-action',    'addoverwrite',
        '-res',       iconFile,
        '-mask',      'ICONGROUP,MAINICON,'
}

// 3) Top-level task
tasks.register('nativeImageAll') {
    group       = 'build'
    description = 'Build native exe and inject icon'
    dependsOn tasks.named('injectIcon')
}
